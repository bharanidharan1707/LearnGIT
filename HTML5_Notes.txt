=>DOCTYPE - Document Type Definition tells browsers and validators what version of HTML the page is written in.
Ex: HTML 4 - <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" ..... > 

=>Charset - character encoding instructs browsers and validators what set of characters to use when rendering web page.
EX: HTML 4 - <meta http-equiv="Content-Type" content="text/html;" charset="UTF-8"/>

If a character set is declared neither in the document nor in the response headers, the
browser might choose one for you, and it may be the wrong one for your site’s needs.

=>lang - Browsers, screen readers, and other user agents use the lang attribute to determine the
language in which the content should be interpreted.

=>Document Structure

header
Is used to contain the headline(s) for a page and/or section. It can also contain
supplemental information such as logos and navigational aids.

footer
Contains information about a page and/or section, such as who wrote it, links to
related information, and copyright statements.

nav
Contains the major navigation links for a page and, while not a requirement, is
often contained by header.

aside
Contains information that is related to the surrounding content but also exists
independently, such as a sidebar or pull-quotes.

section
Is the most generic of the new structural elements, containing content that can be
grouped thematically or is related.

article
Is used for self-contained content that could be consumed independently of the
page as a whole, such as a blog entry.


=> Emphasizing Text
Contain the text to be emphasized with the em element.
New: <p> This an <em> example </em> </p>
Old: <p> This an <i> example </i> </p>

=> Bold text
Contain the text with strong element.
New: <p> This an <strong> example </strong> </p>
Old: <p> This an <b> example </b> </p>

=> Highlighting Text
Highlight the search item in a list of search results.
<p> Found search value here <mark> Value retrieved </mark> </p>

=>Acronyms and abbreviation
Contain the abbreviation or acronym with abbr
<abbr title="Internet Information Service">IIS</abbr>

=> Adding links to block level content
Contain both the logo image and the heading with the a element:
<a href="http://html5funprofit.com">
<h1>HTML5, for Fun &amp; Profit</h1>
<img src="logo.png" alt="HTML5 for Fun and Profit" />
</a>

old:
<h1><a href="http://html5funprofit.com">HTML5, for Fun &amp; Profit</a></h1>
<a href="http://html5funprofit.com"><img src="logo.png" alt="HTML5 for Fun and
Profit" /></a>
 
=> Marking up dates and times

To encode date-time content for machines, but still retain human readability.

<time datetime="2011-01-15">January 15, 2011</time></p>

One limitation of time that is worth mentioning is that it can’t be used
for imprecise dates, such as “August 2011.” It does require, minimally,
the day, month, and year for dates.

===>pubdate

Adding this attribute indicates that the time is the actual publication date-time for a web page
or an article (such as a blog post) on a page.

<time datetime="2011-01-09" pubdate>January 9, 2011</time></p>

=> Setting the stage for expanding and collapsing

To provide content that can expand and collapse with user focus.

Ex:
<details>
<summary>Upcoming Topics</summary>
<p>For the new year, we have a great line up of articles!</p>
<ul>
<li>Understanding the Outline Algorithm</li>
<li>When to Use <code>hgroup</code></li>
<li>Machine Semantics with Microdata</li>
</ul>
</details>

=> Controlling the numbering of list

===> "start" attribute
To start a numbered list at 3.

<ol start="3">
<li>Apples</li>
<li>Oranges</li>
<li>Bananas</li>
</ol>

===> "reversed" attribute
reverses the order of a list
<ol reversed>
<li>Apples</li>
<li>Oranges</li>
<li>Bananas</li>
</ol>

===> "value" attribute
specify the exact number value for each li.
<ol>
<li value="1">Bananas</li>
<li value="1">Oranges</li>
<li value="2">Apples</li>
</ol>

=> Making portions of the page editable
To allow users to directly edit content in the browser.

<article contenteditable>
<h2>Stop <code>section</code> Abuse!</h2>
<p>As the most generic of the HTML5 structural elements, <code>section</code>
is often incorrectly used as a styling container, when <code>div</code> is
more appropriate.</p>
</article>

/* Important */

=>Modernizr

Unfortunately, HTML5 currently comes with limited browser support. You might like
to implement some of these new technologies, but you also want to accommodate
browsers that don’t yet support them.

It detects the availability of various HTML5 and CSS3 features within a
user’s browser and allows you to create fallbacks when a desired feature isn’t currently
supported.

Include in web page
<script src="js/modernizr-1.6.min.js"></script>

Add below script section

<script>
if (Modernizr.audio) {
function playPause() {
var myAudio = document.getElementsByTagName('audio')[0];
if(myAudio.paused)
myAudio.play();
else
myAudio.pause();
}
}
</script>


/* Forms */

=> Displaying search input field

<form>
<p><label>Search <input type="search" name="query"></label></p>
<p><button type="submit">Submit</button></p>
</form>

=> Contact information input fields

To present a user with a form to provide contact information

<form>
<fieldset>
<legend>Contact Information</legend>
<p><label>E-mail address <input type="email" name="email"></label></p>
<p><label>Web site <input type="url" name="website"></label></p>
<p><label>Telephone number <input type="tel" name="phone"></label></p>
</fieldset>
<p><button type="submit">Submit</button></p>
</form>

=> Date and Time fields

<form>
<fieldset>
<legend>Appointment Request</legend>
<p><label>Date Time <input type="datetime" name="datetime"></label></p>
<p><label>Date <input type="date" name="date"></label></p>
<p><label>Time <input type="time" name="time"></label></p>
</fieldset>
<p><button type="submit">Submit</button></p>
</form>

=> Number input

<form>
<p><label>Quantity <input type="number" name="quantity" min="2" max="20" step="2"> </label></p>
<p><button type="submit">Submit</button></p>
</form>

=> Range input (for ex: volume control)

<form>
<p><label>Volume <input type="range" id="volcontrol" name="volume" min="0" max="10" step=".5" value="5"></label></p>
</form>

=> Color input

<form>
<p><label>Background color <input type="color" id="bgc" name="bg"></label></p>
<p><label>Foreground color <input type="color" id="fgc" name="fg"></label></p>
<p><button type="submit">Submit</button></p>
</form>

=> Editable Drop Down 

The datalist element is used to define a list of suggested values for other input
controls—it is not a form input or control itself.

<form>
<p><label for="donation">Donation amount</label>
<datalist id="donations">
<select name="donation">
<option></option>
<option value="10.00">10.00</option>
<option value="25.00">25.00</option>
<option value="50.00">50.00</option>
<option>Other</option>
</select>
If other, please specify:
</datalist>
<input type="text" id="donation" name="donation" list="donations"></p>
<p><button type="submit">Submit</button></p>
</form>

=> Require form field validation

<form>
<fieldset>
<legend>Login</legend>
<p><label>Username <input type="text" name="username" required></label></p>
<p><label>Password <input type="password" name="pwd" required></label></p>
</fieldset>
<p><button type="submit">Submit</button></p>
</form>

=> Auto focus an element

<form>
<p><label>Search <input type="search" name="query" autofocus></label></p>
<p><button type="submit">Submit</button></p>
</form>

=> Displaying placeholder text

<form>
<fieldset>
<legend>Contact Information</legend>
<p><label>E-mail address <input type="email" name="email"
placeholder="user@domain.com"></label></p>
<p><label>Web site <input type="url" name="website"
placeholder="http://www.domain.com/"></label></p>
<p><label>Telephone number <input type="tel" name="phone"
placeholder="123-123-1234"></label></p>
</fieldset>
<p><button type="submit">Submit</button></p>
</form>

=> Disabling auto complete
<form>
<fieldset>
<legend>Login</legend>
<p><label>Username <input type="text" name="username"></label></p>
<p><label>Password <input type="password" name="pwd"
autocomplete="off"></label></p>
</fieldset>
<p><button type="submit">Submit</button></p>
</form>

=> Restricting value 

Restrict the value of an input field according to a set of rules you specify

<form>
<p><label>Telephone number <input type="tel" name="phone"
pattern="[2-9][0-9]{2}-[0-9]{3}-[0-9]{4}"
title="North American format: XXX-XXX-XXXX"></label></p>
<p><button type="submit">Submit</button></p>
</form>

=> Audio Control

<audio src="C:\Users\Public\Music\Sample Music\Kalimba.mp3" controls>
Download <a href="audio.ogg">episode 42 of Learning to Love HTML5</a>
</audio>

===> Integrating multiple audio
<audio controls>
<source src="audio.ogg">
<source src="audio.mp3">
Download <a href="audio.ogg">episode 42 of Learning to Love HTML5</a>
</audio>

Format supported:

.aac
Lossy compression scheme developed as an improvement over MP3, with similar
bit rates but better sound quality
.mp3
Patented yet popular format that uses lossy compression to achieve file sizes onetenth
of noncompressed
.ogg
Open source alternative to .mp3 that also uses a lossy compression format
.wav
Proprietary format for audio that does not utilize any compression
.webm
Google’s open, royalty-free media format, which relies on the Vorbis audio
codec for compression


===> Preloading audio

<audio controls preload>

preload="auto"
Is the same as a Boolean preload, and suggests that the browser should begin
downloading the file but leaves the ultimate action up to the browser. So, if it is a
mobile situation or a slow connection, the browser can decide not to preload in
order to save bandwidth.

preload="metadata"
Hints that the browser shouldn’t buffer the audio itself until the user activates the
controls, but that metadata like duration and tracks should be preloaded.

preload="none"
Suggests that the audio shouldn’t be downloaded until the user activates the
controls.

===> Manipulating audio stream

autoplay
Tells the browser to start playing the audio as soon as the page loads.

loop
Another self-descriptive attribute, loop tells the browser to loop the audio when
playing forward.

Fortunately,audio and video have attributes, events, and methods you can manipulate with
JavaScript to create custom controls, including:

canplaytype(type)
Returns a string indicating whether the browser can play a particular type of media

currentTime
Indicates the current playback position, denoted in seconds

duration
Gives the length of the audio file in seconds

play();
Starts playback at the current position

pause();
Pauses playback if the audio is actively playing

<audio>
<source src="audio.ogg">
</audio>
<button title="Play at 30 seconds" onclick="playAt(30);">30 seconds</button>
<script>
function playAt(seconds){
var audio = document.getElementsByTagName("audio")[0];
audio.currentTime = seconds;
audio.play();
}
</script>

There is no stop method. stop functionality can be mimicked by using the pause(); method to return to the beginning
of the audio file via currentTime:

<audio>
<source src="audio.ogg">
<source src="audio.mp3">
</audio>
<button title="Play at 30 seconds" onclick="playAt(30);">30 seconds</button>
<button title="Stop Audio" onclick="stopAudio();">Stop Audio</button>
<script>
function playAt(seconds){
var audio = document.getElementsByTagName("audio")[0];
audio.currentTime = seconds;
audio.play();
}
function stopAudio(){
var audio = document.getElementsByTagName("audio")[0];
audio.currentTime = 0;
audio.pause();
}
</script>

=> Video

<video src="C:\Users\Public\Videos\Sample Videos\Wildlife.wmv" controls></video>

Format supported:

.aac
Lossy compression scheme developed as an improvement over MP3, with similar
bit rates but better sound quality
.mp3
Patented yet popular format that uses lossy compression to achieve file sizes onetenth
of noncompressed
.ogg
Open source alternative to .mp3 that also uses a lossy compression format
.wav
Proprietary format for audio that does not utilize any compression
.webm
Google’s open, royalty-free media format, which relies on the Vorbis audio
codec for compression


preload="auto"

preload="metadata"

preload="none"


===> Setting Video Dimensions

<video controls width="640" height="360">
<source src="video.mp4" type="video/mp4" />
<source src="video.ogv" type="video/ogg" />
Your device does not support HTML5 video.
</video>

=> figure and figcaption

<figure>
<img src="C:\Users\Public\Pictures\Sample Pictures\Desert.jpg">
<figcaption>
Opening ceremony for the new library building at the state university.
</figcaption>
</figure>

=> enabling a fieldset dynamically

<form>
<fieldset>
<legend>Store Credit Card</legend>
<p><label>Name displayed on your card:<input name="fullName"
required></label></p>
<fieldset name="accountNum" disabled>
<legend>
<label>
<input type="radio" name="accountType"
onchange="form.accountNum.disabled = !checked;
form.accountLetters.disabled=checked">My account is a
12-digit number
</label>
</legend>
<p><label>Store card number: <input name="cardNum"
required></label></p>
</fieldset>
<fieldset name="accountLetters" disabled>
<legend>
<label>
<input type="radio" name="accountType"
onchange="form.accountLetters.disabled = !checked;
form.accountNum.disabled=checked">My account includes
letters and numbers
</label>
</legend>
<p><label>Store card code: <input name="cardLetters"></label></p>
</fieldset>
</fieldset>
</form>







 
